import java.util.HashSet;
import java.util.TreeMap;
public class Wonder {
	private String defaultResource;
	private TreeMap<String, HashSet<Card>> cardsPlaced;
	private String name;
	private TreeMap<String, Integer> resource;
	private String[] cardReq;
	private String [] wonderBenefits;
	private String []benefitChoices;
	private int partsBuilding;
	private boolean canAccessChoices;
	private String key;
	private int amount;
	public Wonder(String wonder)
	{
		defaultResource = "";
		cardsPlaced = new TreeMap<String, HashSet<Card>>();
		String []temp = wonder.split("/");
		name = temp[0];
		defaultResource += decodeAndAddResource(temp[1]);
		wonderBenefits = decode2(temp[3]);
		partsBuilding = 0;
		cardReq =decode2(temp[2]);
		canAccessChoices = false;
	} 
	public void benefitChoice(int choice)
	{
		if(!canAccessChoices)
			return;
		if(key==null)
		{
			if(resource.containsKey(benefitChoices[choice]))
				resource.put(benefitChoices[choice], resource.get(benefitChoices[choice])+(Integer.parseInt(benefitChoices[choice+1])));
			else
				resource.put(benefitChoices[choice], Integer.parseInt(benefitChoices[choice+1]));
			key = benefitChoices[choice];
			amount = Integer.parseInt(benefitChoices[choice+1]);
		}
		else
			resource.put(key, amount);
			
	}
	public void buildWonder() {
		boolean build = true;
		TreeMap<String, Integer> temp= new TreeMap<String, Integer>();
		for(int i =0; i<cardReq.length; i++)
		{
			if(i%2!=0) {
				temp.put(cardReq[i-1], Integer.parseInt(cardReq[i]));
				if(!(resource.get(cardReq[i-1])>= temp.get(cardReq[i-1])))
						build = false;
			}
		}
		if(build)
		{
			partsBuilding++;
			if(benefitChoices[partsBuilding-1].contains("."))
			{
				canAccessChoices= true;
			}
			else {
				String a[] = wonderBenefits[partsBuilding-1].split(" ");
				for(int i = 0; i<a.length;i+=2)
				{
					if(resource.containsKey(a[i]))
						resource.put(a[i], resource.get(a[i])+(Integer.parseInt(a[i+1])));
					else
						resource.put(a[i], Integer.parseInt(a[i+1]));
				}
			}
		}
	}
	public void playedCard(Card a)
	{
		HashSet<Card> oof = cardsPlaced.get(a.getColor());
		oof.add(a);
		cardsPlaced.put(a.getColor(), oof);
		decodeAndAddResource(a.getResource());
	}
	public String decodeAndAddResource(String a)
	{
		String b[] = a.split(" ");
		for(int i = 0 ; i<b.length; i+=2)
		{
			if(b[i].compareTo("s")==0) {
				b[i] = "stone";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[i+1])));
				else
					resource.put(b[i], Integer.parseInt(b[i+1]));
			}
			else if(b[i].compareTo("w")==0) {
				b[i] = "wood";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[i+1])));
				else
					resource.put(b[i], Integer.parseInt(b[i+1]));
			}
			else if(b[i].compareTo("c")==0) {
				b[i] = "clay";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[1])));
				else
					resource.put(b[i], Integer.parseInt(b[1]));
			}
			else if(b[i].compareTo("o")==0) {
				b[i] = "ore";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[1])));
				else
					resource.put(b[i], Integer.parseInt(b[1]));
			}
			else if(b[i].compareTo("p")==0) {
				b[i] = "papyrus";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[1])));
				else
					resource.put(b[i], Integer.parseInt(b[1]));
			}
			else if(b[i].compareTo("l")==0) {
				b[i] = "loom";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[1])));
				else
					resource.put(b[i], Integer.parseInt(b[1]));
			}
			else if(b[i].compareTo("g")==0) {
				b[i] = "glass";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[1])));
				else
					resource.put(b[i], Integer.parseInt(b[1]));
			}
			else if(b[i].compareTo("t")==0) {
				b[i] = "tablet";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[1])));
				else
					resource.put(b[i], Integer.parseInt(b[1]));
			}
			else if(b[i].compareTo("st")==0) {
				b[i] = "sextant";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[1])));
				else
					resource.put(b[i], Integer.parseInt(b[1]));
			}
			else if(b[i].compareTo("gr")==0) {
				b[i] = "gear";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[1])));
				else
					resource.put(b[i], Integer.parseInt(b[1]));
			}
			else if(b[i].compareTo("vp")==0) {
				b[i] = "VictoryPoints";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[1])));
				else
					resource.put(b[i], Integer.parseInt(b[1]));
			}
			else if(b[i].compareTo("mp")==0) {
				b[i] = "MilitaryPoints";
				if(resource.containsKey(b[i]))
					resource.put(b[i], (resource.get(b[i])+Integer.parseInt(b[1])));
				else
					resource.put(b[i], Integer.parseInt(b[1]));
			}
		}
		String returner="";
		for(int i = 0 ; i<b.length; i++)
		{
			returner +=(b[i]+" ");
		}
			return returner;
	}
	public String[] decodeBenefits(String b)
	{
		String a[] = b.split(" ");
		for(int i = 0 ; i<a.length; i++)
		{
			if(a[i].contains("."))
			{
				String [] resourceChoices = a[i].split(".");
				for(int k = 0; k<resourceChoices.length; k+=2)
				{
					resourceChoices[k] = decode(resourceChoices[k]);
				}
				a[i]=resourceChoices.toString();
			}
		}
		return a;
	}
	public String decode(String b)
	{
		String a="";
		if(b.compareTo("s")==0) {
			a += "stone";
		}
		else if(b.compareTo("w")==0) {
			a += "wood";
		}
		else if(b.compareTo("c")==0) {
			a += "clay";
		}
		else if(b.compareTo("o")==0) {
			a += "ore";
		}
		else if(b.compareTo("p")==0) {
			a += "papyrus";
		}
		else if(b.compareTo("l")==0) {
			a += "loom";
		}
		else if(b.compareTo("g")==0) {
			a += "glass";
		}
		else if(b.compareTo("t")==0) {
			a += "tablet";
		}
		else if(b.compareTo("st")==0) {
			a += "sextant";
		}
		else if(b.compareTo("gr")==0) {
			a += "gear";
		}
		else if(b.compareTo("vp")==0) {
			a += "VictoryPoints";
		}
		else if(b.compareTo("mp")==0) {
			a += "MilitaryPoints";
		}
		return a;
	}
	public String[] decode2(String b)
	{
		if(b.contains("."))
		{
			return decodeBenefits(b);
		}
		int c = b.split(" ").length;
		String a[] = new String[c];
		for(int i = 0 ; i<c; i+=2) 
		{
			if(b.compareTo("s")==0) {
				a[i] = "stone";
			}
			else if(b.compareTo("w")==0) {
				a[i] = "wood";
			}
			else if(b.compareTo("c")==0) {
				a[i] = "clay";
			}
			else if(b.compareTo("o")==0) {
				a[i] = "ore";
			}
			else if(b.compareTo("p")==0) {
				a[i] = "papyrus";
			}
			else if(b.compareTo("l")==0) {
				a[i] = "loom";
			}
			else if(b.compareTo("g")==0) {
				a[i] = "glass";
			}
			else if(b.compareTo("t")==0) {
				a[i] = "tablet";
			}
			else if(b.compareTo("st")==0) {
				a[i] = "sextant";
			}
			else if(b.compareTo("gr")==0) {
				a[i] = "gear";
			}
			else if(b.compareTo("vp")==0) {
				a[i] = "VictoryPoints";
			}
			else if(b.compareTo("mp")==0) {
				a[i] = "MilitaryPoints";
			}
		}
		return a;
	}
	public TreeMap<String, Integer> getResources()
	{
	  return resource;
	}
	public TreeMap<String, HashSet<Card>> getCardsPlaced()
	{
	    return cardsPlaced;
	}
	public int getPartsBuilt()
	{
	    return partsBuilding;
	}
	public String toString(String[]a)
	{
		String b = "";
		for(int i =0; i<a.length; i++)
			b+=a[i]+" ";
		return b;
	}
}

	
