import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeMap;
import java.util.TreeSet;
public class Player
{
	private ArrayList<Card> playerHand;
	private int victoryPoints;
	private int numCoins;
	private int militaryPoints;
	private int militaryDefeats;
	private int militaryVictories;
	private Wonder wonder;
	private ArrayList<String> wonderBenefits;
	private TreeMap<String, Boolean> tradeLeft;
	private TreeMap<String, Boolean> tradeRight;
	public Player(Wonder won, ArrayList<Card> initialHand)
	{
		numCoins = 3;
		victoryPoints = 0;
		militaryPoints = 0;
		militaryDefeats = 0;
		militaryVictories = 0;
		wonder = won;
		playerHand = initialHand;
		tradeLeft = new TreeMap<String, Integer>();
		tradeLeft.put("clay", false);
		tradeLeft.put("stone", false);
		tradeLeft.put("wood", false);
		tradeLeft.put("ore", false);
		tradeLeft.put("papyrus", false);
		tradeLeft.put("loom", false);
		tradeLeft.put("glass", false);
		tradeRight = new TreeMap<String, Integer>();
		tradeRight.put("clay", false);
		tradeRight.put("stone", false);
		tradeRight.put("wood", false);
		tradeRight.put("ore", false);
		tradeRight.put("papyrus", false);
		tradeRight.put("loom", false);
		tradeRight.put("glass", false);
	}
	public void removeCard(Card card)
	{
		playerHand.remove(card);
	}
	public int calcVictoryPoints()
	{
		
		Player a;
	    Player b;
		for(int i = 0;i<board.getPlayers().length;i++)
		{
			if(i!=board.getCurrentPlayer())
			{
				if(a==null)
					a = board.getPlayers()[i];
				else
					b = board.getPlayers()[i];
			}
		}
		Iterator<String> colors = wonder.getCardsPlaced().keySet().iterator();
		while(colors.hasNext())
		{
			String color = colors.next();
			if(color.equals("green"))
			{
				TreeMap<String, Integer> scienceScoring = new TreeMap<String, Integer>();
				Iterator<Card> cards = wonder.getCardsPlaced().get(color).iterator();
				while(cards.hasNext())
				{
					Card card = cards.next();
			    	if(card.getEffect().contains("gr"))
			    	{
			    		scienceScoring.put("gr", scienceScoring.get("gr")+1);
			    	}
			    	else if(card.getEffect().contains("t"))
			    	{
			    		scienceScoring.put("t", scienceScoring.get("t")+1);
			    	}
			    	else if(card.getEffect().contains("st"))
			    	{
			    		scienceScoring.put("st", scienceScoring.get("st")+1);
			    	}
					int gearSquared = Math.pow(scienceScoring.get("gr"), 2);
					int boardSquared = Math.pow(scienceScoring.get("t"), 2);
					int protractorSquared = Math.pow(scienceScoring.get("st"), 2);
					victoryPoints+=gearSquared + boardSquared + protractorSquared;
					if(scienceScoring.get("gr")>0&&scienceScoring.get("t")>0&&scienceScoring.get("st")>0)
					{
						victoryPoints+=7;
					}
				}
			 }
			else if(!(color.equals("brown")||color.equals("silver")||color.equals("green")))
			{
			  Iterator<Card> cards = wonder.getCardsPlaced().get(color).iterator();   
			  while(cards.hasNext())
			  {
			    Card card = cards.next();
				String effect = card.getEffect();
			    if(card.getName().contains("Spies guild")||card.getName().contains("Magistrates guild")
			    		card.getName().contains("Workers guild")||card.getName().contains("Craftsman Guild")
			    		||card.getName().contains("Traders guild")||card.getName().contains("Philosophers guild")))
			    {
			       int numVictory = Integer.parseInt(card.getEffect().charAt(0));
			     
			       int colorFlag = 0;
			       String colorToSearch = "";		
						if(effect.contains("Green"))
							colorToSearch = "Green";
						else if(effect.contains("Blue"))
							colorToSearch = "Blue";
						else if(effect.contains("Red"))
							colorToSearch = "Red";
						else if(effect.contains("Yellow"))
							colorToSearch = "Yellow";
						else if(effect.contains("Purple"))
							colorToSearch = "Purple";
						else if(effect.contains("Gray"))
							colorToSearch = "Gray";
						 int addVictoryPoints = Integer.parseInt(effect.substring(effect.indexOf("+") + 1,effect.indexOf("vp")));
						Iterator<Card> cardsA = a.getWonder().getCardsPlaced().get(colorToSearch).iterator();
						while(cardsA.hasNext())
						{
							Card cardA = cardsA.next();
							effect = cardA.getEffect();
							victoryPoints+=addVictoryPoints;
						}
						Iterator<Card> cardsB = b.getWonder().getCardsPlaced().get(colorToSearch).iterator();
						while(cardsB.hasNext())
						{
							Card cardB = cardsB.next();
							effect = cardB.getEffect();
							victoryPoints+=addVictoryPoints;
						}
			    }
			    else if(effect.contains("Builder's guild"))
			    {
			    	 victoryPoints+=a.getWonder().getPartsBuilt()+b.getWonder().getPartsBuilt()+this.getWonder().getPartsBuilt();
					
			    }
			    else if(effect.contains("Shipowner's guild"))
			    {
			    	int brownCards = getWonder().getCardsPlaced().get("Brown").size();
			    	int grayCards = getWonder().getCardsPlaced().get("Gray").size();
			    	int purpleCards =  getWonder().getCardsPlaced().get("Purple").size();
			    	victoryPoints+=brownCards+grayCards+purpleCards;
			    	
			    }
			    else if(effect.contains("vp"))
			    {
			    	 effect = card.getEffect();
					 int addVictoryPoints = Integer.parseInt(effect.substring(effect.indexOf("+") + 1,effect.indexOf("vp")));
					 victoryPoints+=addVictoryPoints;
			    }
			    else if(effect.contains("Strategists guild"))
			    {
				    victoryPoints+=a.getMilitaryDefeats()+b.getMilitaryDefeats();
			    }
			  }
			}
		}
		victoryPoints+=militaryVictories+militaryDefeats;
		int setsOfCoins = numCoins/3;
		victoryPoints+=setsOfCoins;
		for(int i = 0;i<wonderBenefits.size();i++)
		{
			if(wonderBenefits.get(i).contains("vp"))
			{
				String effect = wonderBenefits.get(i);
				int addVictoryPoints = Integer.parseInt(effect.substring(effect.indexOf("+") + 1,effect.indexOf("vp")));
				victoryPoints+=addVictoryPoints;
			}
		}
		return victoryPoints;	
	}
	public ArrayList<Card> getPlayerHand() `
	{
		return playerHand;
	}
	public void setPlayerHand(ArrayList<Card> playerHand) 
	{
		this.playerHand = playerHand;
	}
	public int getVictoryPoints() 
	{
		return victoryPoints;
	}
	public void addVictoryPoints(int num) 
	{
		victoryPoints+=num;
	}
	public int getNumCoins() 
	{
		return numCoins;
	}
	public void addCoins(int coins) 
	{
		numCoins+=coins;
	}
	public int getMilitaryPoints() 
	{
		return militaryPoints;
	}
	public void addMilitaryPoints(int num)
	{
		militaryPoints+=num;
	}
	public int getMilitaryDefeats() 
	{
		return militaryDefeats;
	}
	public void addMilitaryDefeats(int num) //negative number
	{
		militaryDefeats+=num;
	}
	public int getMilitaryVictories()
	{
		return militaryVictories;
	}
	public void addMilitaryVictories(int num) //positive number
	{
		militaryVictories+=num;
	}
	public Wonder getWonder() 
	{
		return wonder;
	}
	public TreeMap<String, Integer> getTradeLeft()
	{
	     return tradeLeft;
	}
	public TreeMap<String, Integer> getTradeRight()
	{
	    return tradeRight;
	}
	public void setWonder(Wonder wonder) 
	{
		this.wonder = wonder;
	}
	public ArrayList<String> getWonderBenefits() 
	{
		return wonderBenefits;
	}
	public void setWonderBenefits(ArrayList<String> wonderBenefits) 
	{
		this.wonderBenefits = wonderBenefits;
	}
}
	
