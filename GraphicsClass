import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.ListIterator;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.text.html.HTMLDocument.Iterator;
public class GraphicsClass extends JPanel implements MouseListener{
	private JFrame frame;
	private int x,y, choice;
	private int winner; // 4 just being a random number i made up
	private Player currentPlayer, previousPlayer, nextPlayer;
	private int age;
	private Card bCard, pCard, wCard;
	private boolean played, built;
	private boolean decided = false;
	public GraphicsClass(int a, Player current, Player next, Player previous) 
	{
		setCurrentPlayer(current);
		setNextPlayer(next);
		setPreviousPlayer(previous);
		setAge(a);
		frame  = new JFrame("7 Wonders");
		frame.setSize(1920, 1080);
		frame.setVisible(true);
		frame.add(this);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		addMouseListener(this);
		setLayout(null);
		winner = 4;
	}
	public void paintComponent(Graphics g)
	{
		//background
		try {
			BufferedImage background = ImageIO.read(new File("Background.jpg"));
			g.drawImage(background, 0,0, frame);
		} catch (IOException e1) {}
		
		
		//display winner
		if(winner != 4) {
			
			g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
			g.drawString("Player " + winner + "Wins", 950,700);
		} 
		
		//draw rectangle
		g.drawRect(420, 755, 1080, 350);
		g.drawRect(0,0,960,125);
		g.drawRect(960,0,960,125);

		g.setFont(new Font("TimesRoman", Font.PLAIN, 35));
		g.drawString(currentPlayer.getWonder().getName(), 200, 900);
		
		g.setColor(Color.RED);
		g.fillRect(1550, 700, 100,200);
		g.setColor(Color.BLACK);
		g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
		g.drawString("BURN", 1570, 800);
		
		g.setColor(Color.GREEN);
		g.fillRect(1450,575, 150, 75);
		g.setColor(Color.BLACK);
		g.setFont(new Font("TimesRoman", Font.PLAIN, 35));
		g.drawString("PLAY", 1475, 615);
		
		g.setColor(Color.CYAN);
		g.fillRect(250,575, 150, 75);
		g.setColor(Color.BLACK);
		g.setFont(new Font("TimesRoman", Font.PLAIN, 35));
		g.drawString("BUILD", 275, 615);
		
		//age card back
		try {
			BufferedImage backOfCard;
			if(age == 1)
				backOfCard = ImageIO.read(new File("Age1_Card.png")); // make if statement to display the correct age card
		    else if(age == 2)
		    	backOfCard = ImageIO.read(new File("Age2_Card.png")); // make if statement to display the correct age card
		    else
		    	backOfCard = ImageIO.read(new File("Age3_Card.png")); // make if statement to display the correct age card
			Image tmp = backOfCard.getScaledInstance(150, 250, Image.SCALE_SMOOTH);
			g.drawImage(tmp, 20, 665, frame);
		} catch (IOException e1) {}
		
		//current players wonders
		try {
			BufferedImage wonder1 = ImageIO.read(new File(currentPlayer.getWonder().getName()+"_wonder1.png"));
			BufferedImage wonder2 = ImageIO.read(new File(currentPlayer.getWonder().getName()+"_wonder2.PNG"));
			BufferedImage wonder3 = ImageIO.read(new File(currentPlayer.getWonder().getName()+"_wonder3.PNG"));
			BufferedImage resource = ImageIO.read(new File(currentPlayer.getWonder().getName() + "_resource.png"));
			g.drawImage(wonder1, 525, 695, frame);
			g.drawImage(wonder2, 840, 695, frame);
			g.drawImage(wonder3, 1155, 695, frame);
			g.drawImage(resource, 450, 718, frame);
		} catch (IOException e) {}
		
		//Display coins
		try {
			BufferedImage coin = ImageIO.read(new File("Coin.PNG"));
			g.drawImage(coin, 600, 636, frame);
		} catch (IOException e) {}
		g.setFont(new Font("TimesRoman", Font.PLAIN, 45));
		g.drawString("x" + currentPlayer.getNumCoins(), 676, 690);//gets number of coins
		
		//Victory point Display
		try {
			BufferedImage victoryPoint = ImageIO.read(new File("Victory_Point.png"));
			g.drawImage(victoryPoint, 915, 622, frame);
		} catch (IOException e) {}
		g.setFont(new Font("TimesRoman", Font.PLAIN, 45));
		g.drawString("x" + currentPlayer.getVictoryPoints(), 995, 690);
		
		//Military point Display
		try {
			BufferedImage militaryP = ImageIO.read(new File("Military_Point.png"));
			g.drawImage(militaryP, 1230, 625, frame);
		} catch (IOException e) {}
		g.setFont(new Font("TimesRoman", Font.PLAIN, 45));
		g.drawString("x" + currentPlayer.getMilitaryPoints(), 1306, 690);
				
		//Display Victory tokens
		try {
			BufferedImage victoryT = ImageIO.read(new File("Victory_Token.png"));
			g.drawImage(victoryT, 1075, 653,frame);
		} catch (IOException e) {}
		g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
		g.drawString("x" + currentPlayer.getMilitaryVictories(), 1130, 690); //gets number of victory points
		
		//Display Defeat tokens
		try {
			BufferedImage defeatT = ImageIO.read(new File("Defeat_Token.png"));
			g.drawImage(defeatT, 750, 653,frame);
		} catch (IOException e) {}
		g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
		g.drawString("x" + currentPlayer.getMilitaryDefeats(), 800, 690); //gets number of victory points
				
		//next player stuff
		//name
		g.setFont(new Font("TimesRoman", Font.PLAIN, 50));
		g.drawString("Next Player " + nextPlayer.getPlayerNum(), 300,40);
		
		g.setColor(Color.GREEN);
		g.fillRect(225, 55, 425, 70);
		
		g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
		g.setColor(Color.BLACK);
		g.drawString("Click Here to View Player " + nextPlayer.getPlayerNum(), 285, 90);
		
		//previous player stuff
		g.setFont(new Font("TimesRoman", Font.PLAIN, 50));
		g.drawString("Previous Player " + previousPlayer.getPlayerNum(), 280 + 950,40);
		
		g.setColor(Color.GREEN);
		g.fillRect(225 + 950, 55, 425, 70);
		
		g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
		g.setColor(Color.BLACK);
		g.drawString("Click Here to View Player " + previousPlayer.getPlayerNum(), 285 + 950, 90);
		
		//load hand
		try {
			BufferedImage card;
			int x = 290;
			for(int i = 0; i < currentPlayer.getPlayerHand().size(); i++) {
				card = ImageIO.read(new File(currentPlayer.getPlayerHand().get(i).getName() + "_Big.png"));
				Image tmp = card.getScaledInstance(125, 175, Image.SCALE_SMOOTH);
				g.drawImage(tmp,x + 150,765, frame);
				g.drawImage(tmp,x + 150,765, frame);
				x+= 150;
			}
		} catch (IOException e2) {}
		
		//choose card
		for(int i = 0; i < currentPlayer.getPlayerHand().size(); i++) {
			if(x >= 290 + ((i + 1) * 150) && x <= 290 + ((i + 1) *150) + 100 && y >= 765 && y <= 765 + 150) {
				System.out.println(i);
				choice = i;
				x = y = 0;
			}
		}
		
		//burn
		if(x >= 1550 && x <= 1550 + 100 && y >=700 && y <=700 + 200) {
			bCard = currentPlayer.getPlayerHand().get(choice);
			x = y =0;
			System.out.println("BURNED");
			built = false;
			played = false;
			decided = true;
		}
		
		//play
		if(x >= 1450 && x <= 1450 + 150 && y >=575 && y <=575 + 75) {
			pCard = currentPlayer.getPlayerHand().get(choice);
			x = y =0;
			System.out.println("PLAYED");
			built = false;
			played = true;
			decided = true;
			
		}
				
		//Build
		if(x >= 250 && x <= 250 + 150 && y >=575 && y <=575 + 75) {
			wCard = currentPlayer.getPlayerHand().get(choice);
			x = y =0;
			System.out.println("BUILD");
			played = false;
			built = true;
			decided = true;
		}
		
		//load placed cards brown x = 450; silver x = 600, blue x = 750; red x = 900; purple x =1050; gold x = 1200; beginning y = 150;
		g.setFont(new Font("TimesRoman", Font.PLAIN, 15));
		g.drawString("Placed Cards:", 10,150);
		g.drawString("Brown = " + currentPlayer.getWonder().getCardsPlaced().get("Brown"), 10,200);
		g.drawString("Silver = " + currentPlayer.getWonder().getCardsPlaced().get("Gray"), 10,250);
		g.drawString("Blue = " + currentPlayer.getWonder().getCardsPlaced().get("Blue"), 10,300);
		g.drawString("Red = " + currentPlayer.getWonder().getCardsPlaced().get("Red"), 10,350);
		g.drawString("Purple = " + currentPlayer.getWonder().getCardsPlaced().get("Purple"), 10,400);
		g.drawString("Gold = " + currentPlayer.getWonder().getCardsPlaced().get("Yellow"), 10,450);
		g.drawString("Green = " + currentPlayer.getWonder().getCardsPlaced().get("Green"), 10,500);
		g.drawString("Resources = " + currentPlayer.getWonder().getResources().toString(), 10, 550);
		
		
		//loading next Player window
		if(x >= 225 && x <= 650 && y >= 55 && y <= 123) {
			new NextPlayerWindow(nextPlayer);
			x = 0;
			y = 0;
		}
		
		//loading previous Player window
		if(x >= 1175 && x <= 1600 && y >=55 && y<= 120) {
			new PreviousPlayerWindow(previousPlayer);
			x = 0;
			y = 0;
		}
		repaint();
		
	}
	
	public void visible() {
		frame.dispose();
	}
	
	public boolean getDecission() {
		return decided;
	}
	
	public void setWinner(int w) {
		winner = w;
	}
	
	public int playerChoice() {
		return choice;
	}
	public boolean getBuilt()
	{
		return built;
	}
	public boolean getPlayed()
	{
		return played;
	}
	public void mouseClicked(MouseEvent e) {
		x = e.getX();
		y = e.getY();
		System.out.println(x + " " + y);
		
		repaint();	
	}
	
	public void setAge(int a) {
		age = a;
	}
	
	public void setCurrentPlayer(Player p) {
		currentPlayer = p;
	}
	
	public void setNextPlayer(Player p) {
		nextPlayer = p;
	}

	public void setPreviousPlayer(Player p) {
		previousPlayer = p;
	}
	
	public void mouseEntered(MouseEvent e) {
		
	}
	public void mouseExited(MouseEvent e) {
		
	}
	public void mousePressed(MouseEvent e) {
		
	}
	public void mouseReleased(MouseEvent e) {
		
	}
	
}
