import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.ListIterator;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.text.html.HTMLDocument.Iterator;
public class GraphicsClass extends JPanel implements MouseListener{
	private JFrame frame;
	private int x,y, choice;
	private Player currentPlayer, previousPlayer, nextPlayer;
	private int age;
	private Card bCard, pCard, wCard;
	public GraphicsClass(int a, Player current, Player next, Player previous) 
	{
		setCurrentPlayer(current);
		setNextPlayer(next);
		setPreviousPlayer(previous);
		setAge(a);
		frame  = new JFrame("7 Wonders");
		frame.setSize(1920, 1080);
		frame.setVisible(true);
		frame.add(this);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		addMouseListener(this);
		setLayout(null);
	}
	public void paintComponent(Graphics g)
	{
		
		//background
		try {
			BufferedImage background = ImageIO.read(new File("Background.jpg"));
			g.drawImage(background, 0,0, frame);
		} catch (IOException e1) {}
		
		//draw rectangle
		g.drawRect(420, 755, 1080, 350);
		g.drawRect(0,0,960,125);
		g.drawRect(960,0,960,125);
		
		g.setColor(Color.RED);
		g.fillRect(1550, 700, 100,200);
		g.setColor(Color.BLACK);
		g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
		g.drawString("BURN", 1570, 800);
		
		g.setColor(Color.GREEN);
		g.fillRect(1450,575, 150, 75);
		g.setColor(Color.BLACK);
		g.setFont(new Font("TimesRoman", Font.PLAIN, 35));
		g.drawString("PLAY", 1475, 615);
		
		g.setColor(Color.CYAN);
		g.fillRect(250,575, 150, 75);
		g.setColor(Color.BLACK);
		g.setFont(new Font("TimesRoman", Font.PLAIN, 35));
		g.drawString("BUILD", 275, 615);
		
		//age card back
		try {
			BufferedImage backOfCard = ImageIO.read(new File("Age" + (age) + "_Card.png")); // make if statement to display the correct age card
			g.drawImage(backOfCard, 20, 665, frame);
		} catch (IOException e1) {}
		
		//current players wonders
		try {
			BufferedImage wonder1 = ImageIO.read(new File(currentPlayer.getWonder().getName() + "_wonder1.PNG"));
			BufferedImage wonder2 = ImageIO.read(new File(currentPlayer.getWonder().getName()+"_wonder2.PNG"));
			BufferedImage wonder3 = ImageIO.read(new File(currentPlayer.getWonder().getName()+"_wonder3.PNG"));
			BufferedImage resource = ImageIO.read(new File(currentPlayer.getWonder().getName() + "_resource.png"));
			g.drawImage(wonder1, 525, 695, frame);
			g.drawImage(wonder2, 840, 695, frame);
			g.drawImage(wonder3, 1155, 695, frame);
			g.drawImage(resource, 450, 718, frame);
		} catch (IOException e) {}
		
		//Display coins
		try {
			BufferedImage coin = ImageIO.read(new File("Coin.PNG"));
			g.drawImage(coin, 600, 636, frame);
		} catch (IOException e) {}
		g.setFont(new Font("TimesRoman", Font.PLAIN, 45));
		g.drawString("x" + currentPlayer.getNumCoins(), 676, 690);//gets number of coins
		
		//Victory point Display
		try {
			BufferedImage victoryPoint = ImageIO.read(new File("Victory_Point.png"));
			g.drawImage(victoryPoint, 915, 622, frame);
		} catch (IOException e) {}
		g.setFont(new Font("TimesRoman", Font.PLAIN, 45));
		g.drawString("x" + currentPlayer.getVictoryPoints(), 995, 690);
		
		//Military point Display
		try {
			BufferedImage militaryP = ImageIO.read(new File("Military_Point.png"));
			g.drawImage(militaryP, 1230, 625, frame);
		} catch (IOException e) {}
		g.setFont(new Font("TimesRoman", Font.PLAIN, 45));
		g.drawString("x" + currentPlayer.getMilitaryPoints(), 1306, 690);
				
		//Display Victory tokens
		try {
			BufferedImage victoryT = ImageIO.read(new File("Victory_Token.png"));
			g.drawImage(victoryT, 1075, 653,frame);
		} catch (IOException e) {}
		g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
		g.drawString("x" + currentPlayer.getMilitaryVictories(), 1120, 690); //gets number of victory points
		
		//Display Defeat tokens
		try {
			BufferedImage defeatT = ImageIO.read(new File("Defeat_Token.png"));
			g.drawImage(defeatT, 750, 653,frame);
		} catch (IOException e) {}
		g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
		g.drawString("x" + currentPlayer.getMilitaryDefeats(), 800, 690); //gets number of victory points
				
		//next player stuff
		//name
		g.setFont(new Font("TimesRoman", Font.PLAIN, 50));
		g.drawString("Player " + nextPlayer.getPlayerNum(), 350,40);
		
		g.setColor(Color.GREEN);
		g.fillRect(225, 55, 425, 70);
		
		g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
		g.setColor(Color.BLACK);
		g.drawString("Click Here to View Player " + nextPlayer.getPlayerNum(), 285, 90);
		
		//previous player stuff
		g.setFont(new Font("TimesRoman", Font.PLAIN, 50));
		g.drawString("Player " + previousPlayer.getPlayerNum(), 350 + 950,40);
		
		g.setColor(Color.GREEN);
		g.fillRect(225 + 950, 55, 425, 70);
		
		g.setFont(new Font("TimesRoman", Font.PLAIN, 25));
		g.setColor(Color.BLACK);
		g.drawString("Click Here to View Player " + previousPlayer.getPlayerNum(), 285 + 950, 90);
		
		//load hand
		try {
			BufferedImage card;
			int x = 290;
			for(int i = 0; i < currentPlayer.getPlayerHand().size(); i++) {
				card = ImageIO.read(new File(currentPlayer.getPlayerHand().get(i).getName() + "_Big.png"));
				Image tmp = card.getScaledInstance(100, 150, Image.SCALE_SMOOTH);
				g.drawImage(tmp,x + 150,765, frame);
				x+= 150;
			}
		} catch (IOException e2) {}
		
		//choose card
		for(int i = 0; i < currentPlayer.getPlayerHand().size(); i++) {
			if(x >= 290 + ((i + 1) * 150) && x <= 290 + ((i + 1) *150) + 100 && y >= 765 && y <= 765 + 150) {
				System.out.println(i);
				choice = i;
				x = y = 0;
			}
		}
		
		//burn
		if(x >= 1550 && x <= 1550 + 100 && y >=700 && y <=700 + 200) {
			bCard = currentPlayer.getPlayerHand().remove(choice);
			x = y =0;
			System.out.println("BURNED");
		}
		
		//play
		if(x >= 1450 && x <= 1450 + 150 && y >=575 && y <=575 + 75) {
			pCard = currentPlayer.getPlayerHand().remove(choice);
			x = y =0;
			System.out.println("PLAYED");
		}
				
		//Build
		if(x >= 250 && x <= 250 + 150 && y >=575 && y <=575 + 75) {
			wCard = currentPlayer.getPlayerHand().remove(choice);
			x = y =0;
			System.out.println("BURNED");
		}
		
		//load placed cards brown x = 450; silver x = 600, blue x = 750; red x = 900; purple x =1050; gold x = 1200; beginning y = 150;
		
		try {
			//brown
			if(currentPlayer.getWonder().getCardsPlaced().containsKey("Brown")) {
				if(currentPlayer.getWonder().getCardsPlaced().get("Brown").size() > 0) {
					BufferedImage brown;
					Image tmp;
					int y = 85;
					HashSet<Card> brownCards = currentPlayer.getWonder().getCardsPlaced().get("Brown");
					ListIterator<Card> itB = (ListIterator<Card>) brownCards.iterator();
					while(itB.hasNext()) {
						brown = ImageIO.read(new File(itB.next().getName() + "_Thin.png"));
						tmp = brown.getScaledInstance(150,65,Image.SCALE_SMOOTH);
						g.drawImage(tmp,450,y + 65, frame);
						y += 65;
					}
				}
			}
			
			
			//silver
			if(currentPlayer.getWonder().getCardsPlaced().containsKey("Gray")) {
				if(currentPlayer.getWonder().getCardsPlaced().get("Gray").size() > 0) {
					BufferedImage silver;
					Image tmp;
					int y = 85;
					HashSet<Card> silverCards = currentPlayer.getWonder().getCardsPlaced().get("Gray");
					ListIterator<Card> itS = (ListIterator<Card>) silverCards.iterator();
					while(itS.hasNext()) {
						silver = ImageIO.read(new File(itS.next().getName() + "_Thin.png"));
						tmp = silver.getScaledInstance(150,65,Image.SCALE_SMOOTH);
						g.drawImage(tmp,600,y + 65, frame);
						y += 65;
					}
				}
			}
			
			//blue
			if(currentPlayer.getWonder().getCardsPlaced().containsKey("Blue")) {
				if(currentPlayer.getWonder().getCardsPlaced().get("Blue").size() > 0) {
					BufferedImage blue;
					Image tmp;
					int y = 85;
					HashSet<Card> blueCards = currentPlayer.getWonder().getCardsPlaced().get("Blue");
					ListIterator<Card> itS = (ListIterator<Card>) blueCards.iterator();
					while(itS.hasNext()) {
						blue = ImageIO.read(new File(itS.next().getName() + "_Thin.png"));
						tmp = blue.getScaledInstance(150,65,Image.SCALE_SMOOTH);
						g.drawImage(tmp,750,y + 65, frame);
						y += 65;
					}
				}
			}
			
			//Red
			if(currentPlayer.getWonder().getCardsPlaced().containsKey("Red")) {
				if(currentPlayer.getWonder().getCardsPlaced().get("Red").size() > 0) {
					BufferedImage red;
					Image tmp;
					int y = 85;
					HashSet<Card> redCards = currentPlayer.getWonder().getCardsPlaced().get("Red");
					ListIterator<Card> itS = (ListIterator<Card>) redCards.iterator();
					while(itS.hasNext()) {
						red = ImageIO.read(new File(itS.next().getName() + "_Thin.png"));
						tmp = red.getScaledInstance(150,65,Image.SCALE_SMOOTH);
						g.drawImage(tmp,900,y + 65, frame);
						y += 65;
					}
				}
			}
			
			//purple
			if(currentPlayer.getWonder().getCardsPlaced().containsKey("Purple")) {
				if(currentPlayer.getWonder().getCardsPlaced().get("Purple").size() > 0) {
					BufferedImage purple;
					Image tmp;
					int y = 85;
					HashSet<Card> purpleCards = currentPlayer.getWonder().getCardsPlaced().get("Purple");
					ListIterator<Card> itS = (ListIterator<Card>) purpleCards.iterator();
					while(itS.hasNext()) {
						purple = ImageIO.read(new File(itS.next().getName() + "_Thin.png"));
						tmp = purple.getScaledInstance(150,65,Image.SCALE_SMOOTH);
						g.drawImage(tmp,1050,y + 65, frame);
						y += 65;
					}
				}
			}
			
			//Yellow
			if(currentPlayer.getWonder().getCardsPlaced().containsKey("Yellow")) {
				if(currentPlayer.getWonder().getCardsPlaced().get("Yellow").size() > 0) {
					BufferedImage yellow;
					Image tmp;
					int y = 85;
					HashSet<Card> yellowCards = currentPlayer.getWonder().getCardsPlaced().get("Yellow");
					ListIterator<Card> itS = (ListIterator<Card>) yellowCards.iterator();
					while(itS.hasNext()) {
						yellow = ImageIO.read(new File(itS.next().getName() + "_Thin.png"));
						tmp = yellow.getScaledInstance(150,65,Image.SCALE_SMOOTH);
						g.drawImage(tmp,1200,y + 65, frame);
						y += 65;
					}
				}
			}
		}catch (IOException e2) {}
		
		
			
		
		//loading next Player window
		if(x >= 225 && x <= 650 && y >= 55 && y <= 123) {
			new NextPlayerWindow(nextPlayer);
			x = 0;
			y = 0;
		}
		
		//loading previous Player window
		if(x >= 1175 && x <= 1600 && y >=55 && y<= 120) {
			new PreviousPlayerWindow(previousPlayer);
			x = 0;
			y = 0;
		}
		
	}
	
	public void loadNextPlayer(Graphics g) {
		
	}
	public void mouseClicked(MouseEvent e) {
		x = e.getX();
		y = e.getY();
		System.out.println(x + " " + y);
		
		repaint();	
	}
	
	public void setAge(int a) {
		age = a;
	}
	
	public void setCurrentPlayer(Player p) {
		currentPlayer = p;
	}
	
	public void setNextPlayer(Player p) {
		nextPlayer = p;
	}

	public void setPreviousPlayer(Player p) {
		previousPlayer = p;
	}
	
	public void mouseEntered(MouseEvent e) {
		
	}
	public void mouseExited(MouseEvent e) {
		
	}
	public void mousePressed(MouseEvent e) {
		
	}
	public void mouseReleased(MouseEvent e) {
		
	}
	
}
