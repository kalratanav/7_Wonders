import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.Random;
import java.util.Scanner;
import java.util.TreeMap;
import java.io.IOException;
import java.io.File;
import java.util.Arrays;

public class Board
{
  private ArrayList<Wonder> wonder;
  private Deck deck;
  private Player[] players;
  private boolean rotation; //true = clockwise; false = counter clockwise;
  private int playerVal;
  private int currentAge;
  private ArrayList<Card> burnedCards;
  private boolean gameRunning;
 
  public Board() throws IOException
  {
wonder = new ArrayList<Wonder>();
burnedCards = new ArrayList<Card>();
  Scanner input = new Scanner(new File("wonders.txt"));
for(int x = 0; x<5; x++)
input.nextLine();
     
  while(input.hasNextLine())
    {
    wonder.add(new Wonder(input.nextLine()));
    }
   
  deck = new Deck();
  players = new Player[]{new Player(getRandomWonder(), null,0), new Player(getRandomWonder(), null,1), new Player(getRandomWonder(), null,2)};
  deal();
    playerVal = 0;
    rotation = true;
    deck = new  Deck();
    gameRunning = true;
    currentAge = 1;
   
  }
  public Player[] getPlayers()
  {
  return players;
  }
 
  public Boolean trade(TreeMap<String, Integer> resourcesNeeded)
  {
   Boolean isEnough = true;
int currentCoins = getCurrentPlayer().getNumCoins();
  //Recognizing trade post benefits
   ArrayList<String> resourcesAcquired = new ArrayList<String>();
   ArrayList<String> resourcesThatCostLessFomA = new ArrayList<String>();
   TreeMap<String, Boolean> tradeLeft = getCurrentPlayer().getTradeLeft();
   Iterator<String> iterTradeLeft = tradeLeft.keySet().iterator();
   Player a = players[2];
   Player b = players[2];
  a = getPreviousPlayer();
  b = getNextPlayer();
   while(iterTradeLeft.hasNext())
   {
    String resource = iterTradeLeft.next();
  boolean ifLess = tradeLeft.get(resource);
        if(ifLess)
        {
        resourcesThatCostLessFomA.add(resource);
        }
   }
   iterTradeLeft = tradeLeft.keySet().iterator();
  TreeMap<String, Boolean> tradeRight = getCurrentPlayer().getTradeRight();
  Iterator<String> iterTradeRight = tradeRight.keySet().iterator();
  ArrayList<String> resourcesThatCostLessFomB = new ArrayList<String>();
   while(iterTradeRight.hasNext())
   {
    String resource = iterTradeRight.next();
  boolean ifLess = tradeRight.get(resource);
        if(ifLess)
        {
        resourcesThatCostLessFomB.add(resource);
        }
   }
   iterTradeRight = tradeRight.keySet().iterator();
   int next = 0;
   int previous = 0;
   
   
   
  int aCoins = a.getNumCoins();
  int bCoins = b.getNumCoins();
    Iterator<String> needResourcesIter = resourcesNeeded.keySet().iterator();
    ArrayList<String> wordResources = new ArrayList<String>();
   
    TreeMap<String, Integer> aResources = a.getWonder().getResources();
    Iterator<String> aIter = aResources.keySet().iterator();
    ArrayList<String> resourcesThatAHas = new ArrayList<String>();
   
    TreeMap<String, Integer> bResources = b.getWonder().getResources();
Iterator<String> bIter = bResources.keySet().iterator();
    ArrayList<String> resourcesThatBHas = new ArrayList<String>();

      while(needResourcesIter.hasNext())
      {
     wordResources.add(needResourcesIter.next());
      }
      while(aIter.hasNext())
      {
       String aResource = aIter.next();
       if(aResource.contains("."))
       {
        String res1 = aResource.substring(0,aResource.indexOf("."));
        String res2 = aResource.substring(aResource.indexOf("."), aResource.length());
        if(wordResources.contains(res1))
        {
        aResource = res1;
        }
        else if(wordResources.contains(res2))
        {
        aResource = res2;
        }
        if(wordResources.contains(res1)&&wordResources.contains(res2))
        {
        int ran = (int)(Math.random()*2+1);
              if(ran==1)
              aResource = res1;
              else if(ran==2)
              aResource = res2;
        }
        aResources.put(aResource, aResources.get(aResource)+1);
       }
      }
      aIter = aResources.keySet().iterator();
      needResourcesIter = resourcesNeeded.keySet().iterator();
      while(aIter.hasNext())
      {
       String aResource = aIter.next();
       int aNumOfResource =  aResources.get(aResource);
        while(needResourcesIter.hasNext())
        {
            String needResource = needResourcesIter.next();
            int numOf = resourcesNeeded.get(needResource);
            if(aResource.equals(needResource)&&aNumOfResource>=numOf)
            {
              resourcesThatAHas.add(aResource);
            }
        }
        needResourcesIter = resourcesNeeded.keySet().iterator();
      }
      aIter = aResources.keySet().iterator();
      needResourcesIter = resourcesNeeded.keySet().iterator();
      while(bIter.hasNext())
      {
      String bResource = bIter.next();
       if(bResource.contains("."))
       {
        String res1 = bResource.substring(0,bResource.indexOf("."));
        String res2 = bResource.substring(bResource.indexOf("."), bResource.length());
        if(wordResources.contains(res1))
        {
        bResource = res1;
        }
        else if(wordResources.contains(res2))
        {
        bResource = res2;
        }
        if(wordResources.contains(res1)&&wordResources.contains(res2))
        {
        int ran = (int)(Math.random()*2+1);
              if(ran==1)
              bResource = res1;
              else if(ran==2)
              bResource = res2;
        }
        bResources.put(bResource, bResources.get(bResource)+1);
       }
      }
      bIter = bResources.keySet().iterator();
      needResourcesIter = resourcesNeeded.keySet().iterator();
      while(bIter.hasNext())
      {
       String bResource = bIter.next();
       int bNumOfResource =  bResources.get(bResource);
        while(needResourcesIter.hasNext())
        {
            String needResource = needResourcesIter.next();
            int numOf = resourcesNeeded.get(needResource);
            if(bResource.equals(needResource)&&bNumOfResource>=numOf)
            {
              resourcesThatBHas.add(bResource);
            }
        }
        needResourcesIter = resourcesNeeded.keySet().iterator();
      }
      bIter = bResources.keySet().iterator();
      needResourcesIter = resourcesNeeded.keySet().iterator();
      ArrayList<String> sameResources = new ArrayList<String>();
      for(int i = 0;i<resourcesThatAHas.size();i++)
      {
      String resourceOfA = resourcesThatAHas.get(i);
      if(resourcesThatBHas.contains(resourceOfA))
      {
          sameResources.add(resourceOfA);
        }
      }
      for(int i = 0;i<sameResources.size();i++)
 {
     String sameResource = sameResources.get(i);
          int numReq = resourcesNeeded.get(sameResource);

      if(resourcesThatCostLessFomA.contains(sameResource)&&resourcesThatCostLessFomB.contains(sameResource))
          {
          boolean tradeA = b.getNumCoins()>a.getNumCoins();
        boolean tradeB = b.getNumCoins()<a.getNumCoins();
if(tradeA==false&&tradeB==false)
            {
            int ran = (int)(Math.random()*2+1);
              if(ran==1)
              tradeA = true;
              else if(ran==2)
              tradeB = true;
}
            if(tradeA)
            {
            resourcesAcquired.add(sameResource);
              for(int x = 1;x<=numReq;x++)
              {
              getCurrentPlayer().reduceCoins(1);
              if(getCurrentPlayer().getNumCoins()<0)
                {
                isEnough = false;
                }
                a.addCoins(1);
              }
            }
            else if(tradeB)
            {
            resourcesAcquired.add(sameResource);

              for(int x = 1;x<=numReq;x++)
              {
                getCurrentPlayer().reduceCoins(1);
                if(getCurrentPlayer().getNumCoins()<0)
              {
              isEnough = false;
              }
                b.addCoins(1);
              }
            }
          }
          else if(resourcesThatCostLessFomA.contains(sameResource))
          {
          resourcesAcquired.add(sameResource);
         
              for(int x = 1;x<=numReq;x++)
              {
             
              getCurrentPlayer().reduceCoins(1);
              if(getCurrentPlayer().getNumCoins()<0)
              {
              isEnough = false;
              }
                a.addCoins(1);
              }
          }
          else if(resourcesThatCostLessFomB.contains(sameResource))
          {
          resourcesAcquired.add(sameResource);

          for(int w = 1;w<=numReq;w++)
              {
          if(getCurrentPlayer().getNumCoins()<0)
                  {
                  isEnough = false;
                  }
                getCurrentPlayer().reduceCoins(1);
                if(getCurrentPlayer().getNumCoins()<0)
              {
              isEnough = false;
              }
                b.addCoins(1);
              }
          }
          else
          {
        boolean tradeA = b.getNumCoins()>a.getNumCoins();
          boolean tradeB = b.getNumCoins()<a.getNumCoins();
          if(tradeA==false&&tradeB==false)
          {
         int ran = (int)(Math.random()*2+1);
              if(ran==1)
              tradeA = true;
              else if(ran==2)
              tradeB = true;
          }
              if(tradeA)
              {
              resourcesAcquired.add(sameResource);
                for(int x = 1;x<=numReq;x++)
                {
               
                getCurrentPlayer().reduceCoins(2);
                if(getCurrentPlayer().getNumCoins()<0)
                {
                isEnough = false;
                }
                  a.addCoins(2);
                }
              }
              else if(tradeB)
              {
             resourcesAcquired.add(sameResource);
                  for(int x = 1;x<=numReq;x++)
                  {
               
                  getCurrentPlayer().reduceCoins(2);
                  if(getCurrentPlayer().getNumCoins()<0)
                    {
                    isEnough = false;
                    }
                    b.addCoins(2);
                  }
              }
             
          }
    }

    while(aIter.hasNext())
    {
     String resource = aIter.next();
     int numOfResource =  aResources.get(resource);
     
     while(needResourcesIter.hasNext())
     {
      String needResource = needResourcesIter.next();
      int numOf = resourcesNeeded.get(needResource);
      if(needResource.equals(resource)&&numOfResource>=numOf)
      {
       if(!resourcesAcquired.contains(needResource))
     {
     resourcesAcquired.add(needResource);
            for(int i = 1;i<=numOf;i++)
            {
            if(resourcesThatCostLessFomA.contains(resource))
              {
              getCurrentPlayer().reduceCoins(1);
              if(getCurrentPlayer().getNumCoins()<0)
              {
              isEnough = false;
              }
              a.addCoins(1);            
}
              else
              {
                getCurrentPlayer().reduceCoins(2);
                if(getCurrentPlayer().getNumCoins()<0)
              {
              isEnough = false;
              }
                a.addCoins(2);
              }
            }
        }
      }
     }
     needResourcesIter = resourcesNeeded.keySet().iterator();
     
    }
    aIter = aResources.keySet().iterator();
    needResourcesIter = resourcesNeeded.keySet().iterator();
    while(bIter.hasNext())
    {
     String resource = bIter.next();
     int numOfResource =  bResources.get(resource);
     while(needResourcesIter.hasNext())
     {
      String needResource = needResourcesIter.next();
      int numOf = resourcesNeeded.get(needResource);
      if(needResource.equals(resource)&&numOfResource>=numOf)
      {
     if(!resourcesAcquired.contains(needResource))
     {
     resourcesAcquired.add(needResource);
            for(int i = 1;i<=numOf;i++)
            {
            if(resourcesThatCostLessFomB.contains(resource))
              {
              getCurrentPlayer().reduceCoins(1);
              if(getCurrentPlayer().getNumCoins()<0)
              {
              isEnough = false;
              }
              b.addCoins(1);            
}
              else
              {
                getCurrentPlayer().reduceCoins(2);
                if(getCurrentPlayer().getNumCoins()<0)
              {
              isEnough = false;
              }
                b.addCoins(2);
              }
           }    
        }
      }
     }
     needResourcesIter = resourcesNeeded.keySet().iterator();
     
    }
   
    bIter = bResources.keySet().iterator();
    needResourcesIter = resourcesNeeded.keySet().iterator();
    Collections.sort(wordResources);
    Collections.sort(resourcesAcquired);
    Boolean traded = false;
    if(wordResources.equals(resourcesAcquired))
    {
    traded = true;
    }
    if(!isEnough)
    {
    a.setCoins(aCoins);
    b.setCoins(bCoins);
    getCurrentPlayer().setCoins(currentCoins);
    }
    if(isEnough==true&&traded ==true)
    {
    return true;
   
    }
    return false;
 
}
 
 
  public void play(int choice, boolean isPlayed, boolean builtWonder)
  {

  ArrayList<Card> temp = getCurrentPlayer().getPlayerHand();
  Card c = temp.remove(choice);
 
  if(isPlayed)
  {
  getCurrentPlayer().getWonder().benefitChoice(choice);
  String[] rc = c.getResourceCost().split("&");
  TreeMap<String, Integer> resourcesNeeded = new TreeMap<String, Integer>();
  for(int x = 0; x< rc.length; x++)
  {
	  if(rc[x].contains("s")&&!rc[x].contains("0")&&!rc[x].contains("null"))
	  {
		  if(getCurrentPlayer().getWonder().getResources().get("stone")==null)
		  {
			  getCurrentPlayer().getWonder().getResources().put("stone", 0);
		  }

		  resourcesNeeded.put("stone", Integer.parseInt(rc[x].substring(1))-getCurrentPlayer().getWonder().getResources().get("stone"));
	  }
	  else if(rc[x].contains("w")&&!rc[x].contains("0")&&!rc[x].contains("null"))
	  {
		  if(getCurrentPlayer().getWonder().getResources().get("wood")==null)
		  {
			  getCurrentPlayer().getWonder().getResources().put("wood", 0);
		  }
		  resourcesNeeded.put("wood", Integer.parseInt(rc[x].substring(1))-getCurrentPlayer().getWonder().getResources().get("wood"));
	  }
   
	  else if(rc[x].contains("c")&&!rc[x].contains("0")&&!rc[x].contains("null"))
	  {
		  if(getCurrentPlayer().getWonder().getResources().get("clay")==null)
		  {
			  getCurrentPlayer().getWonder().getResources().put("clay", 0);
		  }
		  resourcesNeeded.put("clay", Integer.parseInt(rc[x].substring(1))-getCurrentPlayer().getWonder().getResources().get("clay"));
	  }
	  else if(rc[x].contains("o")&&!rc[x].contains("0")&&!rc[x].contains("null"))
	  {
		  if(getCurrentPlayer().getWonder().getResources().get("ore")==null)
		  {
			  getCurrentPlayer().getWonder().getResources().put("ore", 0);
		  }
		  resourcesNeeded.put("ore", Integer.parseInt(rc[x].substring(1))-getCurrentPlayer().getWonder().getResources().get("ore"));
	  }
	  else if(rc[x].contains("p")&&!rc[x].contains("0")&&!rc[x].contains("null"))
	  {
		  if(getCurrentPlayer().getWonder().getResources().get("papyrus")==null)
		  {
			  getCurrentPlayer().getWonder().getResources().put("papyrus", 0);
		  }
		  resourcesNeeded.put("papyrus", Integer.parseInt(rc[x].substring(1))-getCurrentPlayer().getWonder().getResources().get("papyrus"));
	  }
	  else if(rc[x].contains("l")&&!rc[x].contains("0")&&!rc[x].contains("null"))
	  {

		  if(getCurrentPlayer().getWonder().getResources().get("loom")==null)
		  {
			  getCurrentPlayer().getWonder().getResources().put("loom", 0);
		  }
		  resourcesNeeded.put("loom", Integer.parseInt(rc[x].substring(1))-getCurrentPlayer().getWonder().getResources().get("loom"));
	  }
	  else if(rc[x].contains("g")&&!rc[x].contains("0")&&!rc[x].contains("null")&&rc[x].contains("r")==false)
	  {
		  if(getCurrentPlayer().getWonder().getResources().get("glass")==null)
		  {
			  getCurrentPlayer().getWonder().getResources().put("glass", 0);
		  }
		  resourcesNeeded.put("glass", Integer.parseInt(rc[x].substring(1))-getCurrentPlayer().getWonder().getResources().get("glass"));
	  }
  }
  boolean b = true;
  if(!(resourcesNeeded.get("stone")==null)&&resourcesNeeded.get("stone")>getCurrentPlayer().getWonder().getResources().get("stone"))
	  b=false;
  if(!(resourcesNeeded.get("wood")==null)&&resourcesNeeded.get("wood")>getCurrentPlayer().getWonder().getResources().get("wood"))
	  b=false;
  if(!(resourcesNeeded.get("clay")==null)&&resourcesNeeded.get("clay")>getCurrentPlayer().getWonder().getResources().get("clay"))
	  b=false;
  if(!(resourcesNeeded.get("ore")==null)&&resourcesNeeded.get("ore")>getCurrentPlayer().getWonder().getResources().get("ore"))
	  b=false;
  if(!(resourcesNeeded.get("papyrus")==null)&&resourcesNeeded.get("papyrus")>getCurrentPlayer().getWonder().getResources().get("papyrus"))
	  b=false;
  if(!(resourcesNeeded.get("loom")==null)&&resourcesNeeded.get("loom")>getCurrentPlayer().getWonder().getResources().get("loom"))
	  b=false;
  if(!(resourcesNeeded.get("glass")==null)&&resourcesNeeded.get("glass")>getCurrentPlayer().getWonder().getResources().get("glass"))
	  b=false;
  if(c.getCost()>getCurrentPlayer().getNumCoins())
	  b=false;
  if(b)
  {
	  decode(c);
	  getCurrentPlayer().setCoins(getCurrentPlayer().getNumCoins()-c.getCost());
	  getCurrentPlayer().getWonder().playedCard(c);
  }
  else if(trade(resourcesNeeded)&&getCurrentPlayer().getNumCoins()-c.getCost()>=0)
  {
	  getCurrentPlayer().setCoins(getCurrentPlayer().getNumCoins()-c.getCost());
	  decode(c);
	  getCurrentPlayer().getWonder().playedCard(c);
  }
  else
  {
	  burnCard(c);
	  System.out.println("Ha, you can't trade for playing the card so we made you burn it");
  }
  	}
  	else if(builtWonder)
  	{
  		if(getCurrentPlayer().getWonder().buildWonder(false)==false)
  		{
  			String[] rc = getCurrentPlayer().getWonder().getCardReq();
  			TreeMap<String, Integer> resourcesNeeded = new TreeMap<String, Integer>();
  			for(int x = 0; x< rc.length; x=x+2)
  			{
  				if(rc[x].contains("stone"))
  					resourcesNeeded.put("stone", Integer.parseInt(rc[x+1]) - getCurrentPlayer().getWonder().getResources().get("stone"));
  				else if(rc[x].contains("wood"))
  					resourcesNeeded.put("wood", Integer.parseInt(rc[x+1])-getCurrentPlayer().getWonder().getResources().get("wood"));
  				else if(rc[x].contains("clay"))
  					resourcesNeeded.put("clay", Integer.parseInt(rc[x+1])-getCurrentPlayer().getWonder().getResources().get("clay"));
  				else if(rc[x].contains("ore")&&!rc[x].contains("0"))
  					resourcesNeeded.put("ore", Integer.parseInt(rc[x+1])-getCurrentPlayer().getWonder().getResources().get("ore"));
  				else if(rc[x].contains("papyrus")&&!rc[x].contains("0"))
  					resourcesNeeded.put("papyrus", Integer.parseInt(rc[x+1])-getCurrentPlayer().getWonder().getResources().get("papyrus"));
  				else if(rc[x].contains("loom")&&!rc[x].contains("0"))
  					resourcesNeeded.put("loom", Integer.parseInt(rc[x+1])-getCurrentPlayer().getWonder().getResources().get("loom"));
  				else if(rc[x].contains("glass")&&!rc[x].contains("0"))
  					resourcesNeeded.put("glass", Integer.parseInt(rc[x+1])-getCurrentPlayer().getWonder().getResources().get("glass"));
  			}
  			if(trade(resourcesNeeded) == false)
  			{
  				burnCard(c);
  				System.out.println("Ha, you can't trade for building the wonder so we made you burn it");
  			}
  			else
  			{
  				getCurrentPlayer().getWonder().buildWonder(true);
  				getCurrentPlayer().setCoins(getCurrentPlayer().getNumCoins()+getCurrentPlayer().getWonder().getCoinVal());
  				getCurrentPlayer().setMilitaryPoints(getCurrentPlayer().getMilitaryPoints()+getCurrentPlayer().getWonder().getMilitaryVal());
  				getCurrentPlayer().setVictoryPoints(getCurrentPlayer().getVictoryPoints()+getCurrentPlayer().getWonder().getVictoryVal());
  			}
  		}
  	}
  	else
  		burnCard(c);
  	nextTurn();
  	if(currentAge==3&&getCurrentPlayer().getPlayerHand().size()==1)
  	{
  		int playerA = calcVictoryPoints(0);
  		int playerB = calcVictoryPoints(1);
  		int playerC = calcVictoryPoints(2);
  		players[0].setVictoryPoints(calcVictoryPoints(0));
  		players[1].setVictoryPoints(calcVictoryPoints(1));
  		players[2].setVictoryPoints(calcVictoryPoints(2));
	  
  		gameRunning = false;
  	}
 
  }
 
 
  public void deal()
  {
  ArrayList<Card> deal = new ArrayList<Card>();
    if(currentAge == 00)
          deal = deck.getAge1();
      else if(currentAge == 2)
      deal = deck.getAge2();
      else
      deal = deck.getAge3();
     
      Collections.shuffle(deal);
   for(int i = 0;i < players.length;i++)
      {
  int counter = 0;
      ArrayList<Card> hand = new ArrayList<Card>();
        while(counter<=6)
        {
          hand.add(deal.remove(0));
          counter++;
        }
        players[i].setHand(hand);
      }
      for(int i = 0;i<deal.size();i++)
      {
     
 }
  }
 
  public void nextTurn()
  {
    if(playerVal + 1 > 2)
      playerVal = 0;
    else
      playerVal++;
   
    if(playerVal==0&&players[playerVal].getPlayerHand().size()<7&&players[playerVal].getPlayerHand().size()>1)
    endOfRound();
  }
  public Wonder getRandomWonder()
  {

 Random random = new Random();
 int i = random.nextInt(wonder.size());
 return wonder.remove(i);
  }
 
  public void burnCard(Card choice)
  {
  burnedCards.add(choice);
  getCurrentPlayer().addCoins(3);
  }
 
  public Player getCurrentPlayer()
  {
  return players[playerVal];
  }
 
  public void endOfRound()
  {
 if(!rotation)
  {
  ArrayList<Card> temp = getCurrentPlayer().getPlayerHand();
    ArrayList<Card> temp2 = getNextPlayer().getPlayerHand();
  getCurrentPlayer().setHand(getPreviousPlayer().getPlayerHand());
  getPreviousPlayer().setHand(temp2);
  getNextPlayer().setHand(temp);
  }
  else
  {
  ArrayList<Card> temp = getCurrentPlayer().getPlayerHand();
    ArrayList<Card> temp2 = getPreviousPlayer().getPlayerHand();
    getCurrentPlayer().setHand(getNextPlayer().getPlayerHand());
    getNextPlayer().setHand(temp2);
    getPreviousPlayer().setHand(temp);
  }
  }

  public void endOfAge() {
    int pointsEarned = 1;
    if(currentAge == 2) {
    pointsEarned = 3;
    }
    else if(currentAge == 3) {
    pointsEarned = 5;
    }
    if(players[0].getMilitaryPoints()>players[1].getMilitaryPoints())
    {
    	
    	players[0].addMilitaryVictories(pointsEarned);
    	players[1].addMilitaryDefeats(-1);
    }
    else if(players[0].getMilitaryPoints()<players[1].getMilitaryPoints())
    {
    	players[0].addMilitaryDefeats(-1);
    	players[1].addMilitaryVictories(pointsEarned);
    	
    }
    if(players[1].getMilitaryPoints()>players[2].getMilitaryPoints())
    {
    	players[1].addMilitaryVictories(pointsEarned);
    	players[2].addMilitaryDefeats(-1);
    }
    else if(players[1].getMilitaryPoints()<players[2].getMilitaryPoints())
    {
    	players[1].addMilitaryDefeats(-1);
    	players[2].addMilitaryVictories(pointsEarned);
    }
    if(players[2].getMilitaryPoints()>players[0].getMilitaryPoints())
    {
    	players[2].addMilitaryVictories(pointsEarned);
    	players[0].addMilitaryDefeats(-1);
    }
    else if(players[2].getMilitaryPoints()<players[0].getMilitaryPoints())
    {
    	players[2].addMilitaryDefeats(pointsEarned);
    	players[0].addMilitaryVictories(pointsEarned);
    }
    if(currentAge<3)
    currentAge++;
    for(int x = 0 ; x<2; x++)
    {
    burnedCards.add(players[x].getPlayerHand().remove(0));
    }
    deal();
  }
 
  public boolean decode(Card c)
{
  String str = c.getEffect();
  if(c.getEffect().equals("null")||c.getEffect()==null)
  return true;
 
 
  if(c.getEffect().contains("-1"))
    {
  if(c.getEffect().contains("right"))
  {
  String[] arr = c.getEffect().substring(c.getEffect().indexOf("right")+5).split("&");
         
  for(String x : arr)
  {
  if(x.equals("c"))
  getCurrentPlayer().getTradeRight().put("clay", true);
  else if(x.equals("o"))
  getCurrentPlayer().getTradeRight().put("ore", true);
  else if(x.equals("s"))
  getCurrentPlayer().getTradeRight().put("stone", true);
  else if(x.equals("w"))
  getCurrentPlayer().getTradeRight().put("wood", true);
  }
  return true;
  }
  else if(c.getEffect().contains("left"))
      {
  String[] arr = c.getEffect().substring(c.getEffect().indexOf("left")+4).split("&");
           
  for(String x : arr)
  {
  if(x.equals("c"))
  getCurrentPlayer().getTradeLeft().put("clay", true);
  else if(x.equals("o"))
  getCurrentPlayer().getTradeLeft().put("ore", true);
  else if(x.equals("s"))
  getCurrentPlayer().getTradeLeft().put("stone", true);
  else if(x.equals("w"))
  getCurrentPlayer().getTradeLeft().put("wood", true);
  }
  return true;
      }
  else
  {
  String[] arr = c.getEffect().substring(c.getEffect().indexOf("both")+4).split("&");
 
  for(String x : arr)
  {
  if(x.equals("g"))
  {
  getCurrentPlayer().getTradeLeft().put("glasswork", true);
  getCurrentPlayer().getTradeRight().put("glasswork", true);
  return true;
  }
  else if(x.equals("l"))
  {
  getCurrentPlayer().getTradeLeft().put("loom", true);
  getCurrentPlayer().getTradeRight().put("loom", true);
  return true;
  }
  else if(x.equals("p"))
  {
  getCurrentPlayer().getTradeLeft().put("papyrus", true);
  getCurrentPlayer().getTradeRight().put("papyrus", true);
  return true;
  }
  }
  }
    }
  else
  {
  int val = Integer.parseInt(c.getEffect().substring(1, 2));
  if(c.getEffect().contains("for"))
  {
  if(c.getEffect().contains("&"))
  {
  int v2 = Integer.parseInt(c.getEffect().substring(c.getEffect().indexOf("&")+2, c.getEffect().indexOf("&")+3));
  if(c.getEffect().contains("WonderStep"))
  {
  getCurrentPlayer().addCoins(getCurrentPlayer().getWonder().getPartsBuilt() * val);
  getCurrentPlayer().addVictoryPoints(getCurrentPlayer().getWonder().getPartsBuilt() * v2);
  return true;
  }
  else if(c.getEffect().contains("Yellow"))
  {
  getCurrentPlayer().addCoins(numCards("Yellow", c.getEffect().contains("both"), c.getEffect().contains("include")) * val);
  getCurrentPlayer().addVictoryPoints(numCards("Yellow", c.getEffect().contains("both"), c.getEffect().contains("include")) * v2);
  return true;
  }
  else if(c.getEffect().contains("Brown"))
  {
  getCurrentPlayer().addCoins(numCards("Brown", c.getEffect().contains("both"), c.getEffect().contains("include")) * val);
  getCurrentPlayer().addVictoryPoints(numCards("Brown", c.getEffect().contains("both"), c.getEffect().contains("include")) * v2);
  return true;
  }
  else
  {
  getCurrentPlayer().addCoins(numCards("Gray", c.getEffect().contains("both"), c.getEffect().contains("include")) * val);
  getCurrentPlayer().addVictoryPoints(numCards("Gray", c.getEffect().contains("both"), c.getEffect().contains("include")) * v2);
  return true;
  }
  }
  else
  {
  if(c.getEffect().contains("Brown"))
  {
  getCurrentPlayer().addCoins(numCards("Brown", c.getEffect().contains("both"), c.getEffect().contains("include")) *val );
  return true;
  }
  else
  {
  getCurrentPlayer().addCoins(numCards("Gray", c.getEffect().contains("both"), c.getEffect().contains("include")) *val );
  return true;
  }
}
}  
  else
  {
  String s = c.getEffect().substring(2);
  if(s.equals("coin"))
  getCurrentPlayer().addCoins(val);
  else if(s.equals("vp"))
  getCurrentPlayer().addVictoryPoints(val);
  else if(s.equals("mp"))
  getCurrentPlayer().addMilitaryPoints(val);
  else if(s.equals("st"))
  getCurrentPlayer().getWonder().decodeAndAddResource("st " + val);
  else if(s.equals("gr"))
  getCurrentPlayer().getWonder().decodeAndAddResource("gr " + val);
  else if(s.equals("t"))
  getCurrentPlayer().getWonder().decodeAndAddResource("t " + val);
  return true;
  }
  }
return true;
}
 
  public int numCards(String color, boolean both, boolean include)
  {
 int count = 0;
 if(include)
 {
   count+= getCurrentPlayer().getWonder().getCardsPlaced().get(color).size();
 }
 if(both)
 {
 if(playerVal==2)
 {
 count+= players[1].getWonder().getCardsPlaced().get(color).size();
 count+= players[0].getWonder().getCardsPlaced().get(color).size();
 }
 else if(playerVal==0)
 {
 count+= players[1].getWonder().getCardsPlaced().get(color).size();
 count+= players[2].getWonder().getCardsPlaced().get(color).size();
 }
 else
 {
 count+= players[0].getWonder().getCardsPlaced().get(color).size();
 count+= players[2].getWonder().getCardsPlaced().get(color).size();
 }
 }
 return count;
  }
 
 
  public int calcVictoryPoints(int playerNumber)
{
    int victoryPoints = getPlayers()[playerNumber].getVictoryPoints();
    Player curr = getPlayers()[playerNumber];
    int next = 0;
    int previous = 0;
    Player a = getPlayers()[2];
    Player b = getPlayers()[2];
    next = playerNumber+1;
    previous = playerNumber-1;
    if(playerNumber==0)
    {
    	previous = 2;
    }
    if(playerNumber==2)
    {
    	next = 0;
    }
    
    
    a = getPlayers()[next];
    b = getPlayers()[previous];
   
Iterator<String> colors = curr.getWonder().getCardsPlaced().keySet().iterator();
while(colors.hasNext())
{
String color = colors.next();
if(color.equals("Green"))
{
TreeMap<String, Integer> scienceScoring = new TreeMap<String, Integer>();
Iterator<Card> cards = curr.getWonder().getCardsPlaced().get(color).iterator();
while(cards.hasNext())
{
 Card card = cards.next();
    if(card.getEffect().contains("gr"))
    {
    	if(scienceScoring.get("gr")==null)
    	{
    		scienceScoring.put("gr", 1);
    	}
    scienceScoring.put("gr", scienceScoring.get("gr")+1);
    }
    else if(card.getEffect().contains("t"))
    {
    	if(scienceScoring.get("t")==null)
    	{
    	    scienceScoring.put("t", 0);
    	}
    scienceScoring.put("t", scienceScoring.get("t")+1);
    }
    else if(card.getEffect().contains("st"))
    {
    	if(scienceScoring.get("st")==null)
    	{
    		scienceScoring.put("st", 1);
    	}
    scienceScoring.put("st", scienceScoring.get("st")+1);
    }
int gearSquared = (int)(Math.pow(scienceScoring.get("gr"), 2));
int boardSquared = (int)(Math.pow(scienceScoring.get("t"), 2));
int protractorSquared = (int)(Math.pow(scienceScoring.get("st"), 2));
victoryPoints+= gearSquared + boardSquared + protractorSquared;
if(scienceScoring.get("gr")>0&&scienceScoring.get("t")>0&&scienceScoring.get("st")>0)
{
victoryPoints+=7;
}
}
}
else if(!(color.equals("Brown")||color.equals("Silver")||color.equals("Purple")))
{
 Iterator<Card> cards = curr.getWonder().getCardsPlaced().get(color).iterator();  
 while(cards.hasNext())
 {
   Card card = cards.next();
String effect = card.getEffect();
   if(card.getName().contains("Spies guild")|| card.getName().contains("Magistrates guild") ||
    card.getName().contains("Workers guild")||card.getName().contains("Craftsman Guild")
    ||card.getName().contains("Traders guild")||card.getName().contains("Philosophers guild"))
   {
      String colorToSearch = "";
if(effect.contains("Green"))
colorToSearch = "Green";
else if(effect.contains("Blue"))
colorToSearch = "Blue";
else if(effect.contains("Red"))
colorToSearch = "Red";
else if(effect.contains("Yellow"))
colorToSearch = "Yellow";
else if(effect.contains("Purple"))
colorToSearch = "Purple";
else if(effect.contains("Gray"))
colorToSearch = "Gray";
       Iterator<Card> cardsA = a.getWonder().getCardsPlaced().get(colorToSearch).iterator();
       while(cardsA.hasNext())
       {
          Card cardA = cardsA.next();
          effect = cardA.getEffect();
          int addVictoryPoints = Integer.parseInt(effect.substring(effect.indexOf("+") + 1,effect.indexOf("vp")));
          victoryPoints+=addVictoryPoints;
       }
       Iterator<Card> cardsB = b.getWonder().getCardsPlaced().get(colorToSearch).iterator();
       while(cardsB.hasNext())
       {
         Card cardB = cardsB.next();
         effect = cardB.getEffect();
         int addVictoryPoints = Integer.parseInt(effect.substring(effect.indexOf("+") + 1,effect.indexOf("vp")));
         victoryPoints+=addVictoryPoints;
       }
   }
   else if(card.getName().contains("Builder's guild"))
   {
    victoryPoints+=a.getWonder().getPartsBuilt()+b.getWonder().getPartsBuilt()+ getCurrentPlayer().getWonder().getPartsBuilt();

   }
   else if(card.getEffect().contains("vp"))
       {
          int num = Integer.parseInt(card.getEffect().substring(card.getEffect().indexOf("+"), card.getEffect().indexOf("vp")));
        }
   else if(card.getName().contains("Shipowner's guild"))
   {
    int brownCards =curr.getWonder().getCardsPlaced().get("Brown").size();
    int grayCards = curr.getWonder().getCardsPlaced().get("Gray").size();
    int purpleCards =  curr.getWonder().getCardsPlaced().get("Purple").size();
    victoryPoints+=brownCards+grayCards+purpleCards;    
   }
   else if(card.getName().contains("Strategists guild"))
   {        
   victoryPoints+=a.getMilitaryDefeats()+b.getMilitaryDefeats();
   }
 }
}
}
victoryPoints+=curr.getMilitaryVictories()+getCurrentPlayer().getMilitaryDefeats();
int setsOfCoins = curr.getNumCoins()/3;
victoryPoints+=setsOfCoins;
for(int i = 0;i<curr.getWonderBenefits().size();i++)
{
if(curr.getWonderBenefits().get(i).contains("vp"))
{
String effect = curr.getWonderBenefits().get(i);
int addVictoryPoints = Integer.parseInt(effect.substring(effect.indexOf("+") + 1,effect.indexOf("vp")));
victoryPoints+=addVictoryPoints;
}
}
return victoryPoints;
}
  public int declareWinner()
  {
 int aVictory = players[0].getVictoryPoints();
 int bVictory = players[1].getVictoryPoints();
 int cVictory = players[2].getVictoryPoints();
 int[] victories = {aVictory, bVictory, cVictory};
 ArrayList<String> playersWithSameVictory = new ArrayList<String>();
 int max = Integer.MIN_VALUE;
 for(int i = 0;i<victories.length;i++)
 {
 if(victories[i]>max)
 {
 max = victories[i];
 }
 else if(victories[i]==max)
 {
 int num = i;
 int numB = i-1;
 if(victories[num]==players[0].getVictoryPoints())
 {
 playersWithSameVictory.add("a");
 }
 else if(victories[num]==players[1].getVictoryPoints())
 {
 playersWithSameVictory.add("b");

 }
 else if(victories[num]==players[2].getVictoryPoints())
 {
 playersWithSameVictory.add("c");

 }
 if(victories[numB]==players[0].getVictoryPoints())
 {
 playersWithSameVictory.add("a");
 }
 else if(victories[numB]==players[1].getVictoryPoints())
 {
 playersWithSameVictory.add("b");

 }
 else if(victories[numB]==players[2].getVictoryPoints())
 {
 playersWithSameVictory.add("c");

 }
 
 }
 }
 if(playersWithSameVictory.size()>0)
 {
 int aCoins = 0;
 int bCoins = 0;
 int cCoins = 0;
for(int i = 0;i<playersWithSameVictory.size();i++)
{
if(playersWithSameVictory.get(i).equals("a"))
{
 aCoins = players[0].getNumCoins();
}
else if(playersWithSameVictory.get(i).equals("b"))
{
 bCoins = players[1].getNumCoins();
}
else if(playersWithSameVictory.get(i).equals("c"))
{
 cCoins = players[2].getNumCoins();
}
}
 int[] coins = {aCoins, bCoins, cCoins};
 Arrays.sort(coins);
 int maxCoins = coins[2];
 if(maxCoins==players[0].getNumCoins())
 {
 return 0;
 }
 else if(maxCoins==players[1].getNumCoins())
 {
 return 1;
 }
 else if(maxCoins==players[2].getNumCoins())
 {
 return 2;
 }
 

 }
 else
 {
 if(max==players[0].getVictoryPoints())
 {
 return 0;
 }
 else if(max==players[1].getVictoryPoints())
 {
 return 1;

 }
 else
 {
 return 2;

 }
 }
 return 0;
 
  }
  public ArrayList<Object> gameState()
  {
  return new ArrayList(Arrays.asList(getCurrentPlayer(), getDeck(), getRotation(), getPlayerVal(), getCurrentAge(), getBurnedCards()));
  }
 
  public ArrayList<Card> getBurnedCards()
  {
 return burnedCards;
  }
 
  public int getCurrentAge()
  {
 return currentAge;
  }
 
  public int getPlayerVal()
  {
 return playerVal;
  }
 
  public boolean getRotation()
  {
  return rotation;
  }
  public Deck getDeck()
  {
 return deck;
  }
 
  public Player getPreviousPlayer()
  {
 if(getPlayerVal()==0)
 return players[2];
 else if(getPlayerVal()==1)
 return players[0];
 else
 return players[1];
  }
 
  public Player getNextPlayer()
  {
 if(getPlayerVal()==0)
 return players[1];
 else if(getPlayerVal()==1)
 return players[2];
 else
 return players[0];
  }
  public Card choseGraveYard()
  {
 int ran = (int)Math.random()*burnedCards.size();
 return burnedCards.get(ran);
  }
  public boolean gameRunning()
  {
 return gameRunning;
  }
 
  public String currentPlayerToString()
  {
  return "Player " + playerVal;
  }
 
  public void printBoard()
  {
 System.out.println("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
 System.out.println("Age = " +currentAge + " Player =" + (playerVal+1));
 System.out.println();
 System.out.println("Cards played");
 System.out.println("Blue = " + getCurrentPlayer().getWonder().getCardsPlaced().get("Blue").toString());
 System.out.println("Yellow = " + getCurrentPlayer().getWonder().getCardsPlaced().get("Yellow").toString());
 System.out.println("Red= " + getCurrentPlayer().getWonder().getCardsPlaced().get("Red").toString());
 System.out.println("Brown = " + getCurrentPlayer().getWonder().getCardsPlaced().get("Brown").toString());
 System.out.println("Gray = " + getCurrentPlayer().getWonder().getCardsPlaced().get("Gray").toString());
 System.out.println("Purple = " + getCurrentPlayer().getWonder().getCardsPlaced().get("Purple").toString());
 System.out.println();
 System.out.println("Your Wonder: " + getCurrentPlayer().getWonder().getName());
 System.out.println();
 if(!(getCurrentPlayer().getWonder().getWonderBenefits().length<6))
 System.out.println("Wonder Benefits : [" + getCurrentPlayer().getWonder().getWonderBenefits()[0] + " " + getCurrentPlayer().getWonder().getWonderBenefits()[1] +", " + getCurrentPlayer().getWonder().getWonderBenefits()[2] + " " +getCurrentPlayer().getWonder().getWonderBenefits()[3] + ", " + getCurrentPlayer().getWonder().getWonderBenefits()[4]+" " +getCurrentPlayer().getWonder().getWonderBenefits()[5] +"]");
 else
 System.out.println("Wonder Benefits : [" + getCurrentPlayer().getWonder().getWonderBenefits()[0] + " " + getCurrentPlayer().getWonder().getWonderBenefits()[1] +", " + getCurrentPlayer().getWonder().getWonderBenefits()[2].toString() + ", " + getCurrentPlayer().getWonder().getWonderBenefits()[3]+" " +getCurrentPlayer().getWonder().getWonderBenefits()[4] +"]");
 System.out.println("WonderStep ResourceCosts : [" + getCurrentPlayer().getWonder().getCardReq()[0] + " " + getCurrentPlayer().getWonder().getCardReq()[1] + ", " + getCurrentPlayer().getWonder().getCardReq()[2] + " " + getCurrentPlayer().getWonder().getCardReq()[3] +", " + getCurrentPlayer().getWonder().getCardReq()[4] +" " +getCurrentPlayer().getWonder().getCardReq()[5]  +"]");
 System.out.println();
 System.out.println("VP = " + getCurrentPlayer().getVictoryPoints() + " MP = " + getCurrentPlayer().getMilitaryPoints() + " Losses = " + getCurrentPlayer().getMilitaryDefeats() + " Coins = " + getCurrentPlayer().getNumCoins());
 System.out.println();
 System.out.println("Resources");
 System.out.println(" Wood:" + getCurrentPlayer().getWonder().getResources().get("wood") + " Stone: " + getCurrentPlayer().getWonder().getResources().get("stone") + " Clay: " + getCurrentPlayer().getWonder().getResources().get("clay") + " Ore: " + getCurrentPlayer().getWonder().getResources().get("ore") + " Papyrus: " + getCurrentPlayer().getWonder().getResources().get("papyrus") + " Loom: " + getCurrentPlayer().getWonder().getResources().get("loom") + " Glassworks: " + getCurrentPlayer().getWonder().getResources().get("glass") + " Tablet: " + getCurrentPlayer().getWonder().getResources().get("tablet") + " Sextant: " + getCurrentPlayer().getWonder().getResources().get("sextant") + " Gear: " + getCurrentPlayer().getWonder().getResources().get("gear"));
 System.out.println();
 System.out.println("Previous Player Resources::  Wood:" + getPreviousPlayer().getWonder().getResources().get("wood") + " Stone: " + getPreviousPlayer().getWonder().getResources().get("stone") + " Clay: " + getPreviousPlayer().getWonder().getResources().get("clay") + " Ore: " + getPreviousPlayer().getWonder().getResources().get("ore") + " Papyrus: " + getPreviousPlayer().getWonder().getResources().get("papyrus") + " Loom: " + getPreviousPlayer().getWonder().getResources().get("loom") + " Glassworks: " + getPreviousPlayer().getWonder().getResources().get("glass") + " Tablet: " + getPreviousPlayer().getWonder().getResources().get("tablet")+ " Sextant: " + getPreviousPlayer().getWonder().getResources().get("sextant") + " Gear: " + getPreviousPlayer().getWonder().getResources().get("gear"));
 System.out.println();
 System.out.println("Next Player Resources::  Wood:" + getNextPlayer().getWonder().getResources().get("wood") + " Stone: " + getNextPlayer().getWonder().getResources().get("stone") + " Clay: " + getNextPlayer().getWonder().getResources().get("clay") + " Ore: " + getNextPlayer().getWonder().getResources().get("ore") + " Papyrus: " + getNextPlayer().getWonder().getResources().get("papyrus") + " Loom: " + getNextPlayer().getWonder().getResources().get("loom") + " Glassworks: " + getNextPlayer().getWonder().getResources().get("glass") + " Tablet: " + getNextPlayer().getWonder().getResources().get("tablet")+ " Sextant: " + getNextPlayer().getWonder().getResources().get("sextant") + " Gear: " + getNextPlayer().getWonder().getResources().get("gear"));
 System.out.println();
 System.out.print("Hand = \n");
 for(int x = 0; x < getCurrentPlayer().getPlayerHand().size(); x++)
 System.out.print(x + ")) "  +getCurrentPlayer().getPlayerHand().get(x) + "\n");
 System.out.println();
 System.out.println("-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
 choose();
  }
 
  public void choose()
  {
 Scanner input = new Scanner(System.in);
 System.out.println("Choose a card.");
 boolean isPlayed = false, isBuilt = false;
 int choice=0;
 String temp = input.nextLine();
 choice = Integer.parseInt(temp);
 System.out.println("Enter p for play card, b for build wonder, or x for burn");
 String str = input.nextLine();
 if(str.equals("p"))
 isPlayed = true;
 else if(str.equals("b"))
 isBuilt = true;
 play(choice, isPlayed, isBuilt);
  }
}
